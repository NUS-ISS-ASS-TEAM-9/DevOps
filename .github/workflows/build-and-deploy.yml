# Devops/.github/workflows/build-and-deploy.yml

name: Build and Deploy Java Spring Boot Service to GKE

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      dockerfile-path:
        required: false
        type: string
        default: Dockerfile
    secrets:
      GCP_SA_KEY:
        required: true
      GCP_PROJECT_ID:
        required: true
      GCP_REGION:
        required: true
      GCP_CLUSTER_NAME:
        required: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin'

      - name: Set up kubectl
        run: |
          gcloud container clusters get-credentials ${{ secrets.GCP_CLUSTER_NAME }} --region ${{ secrets.GCP_REGION }} --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Build application
        run: |
          cd ${{ inputs.service-name }}
          ./mvnw clean package -DskipTests

      - name: Build and Push Docker Image to Artifact Registry
        run: |
          cd ${{ inputs.service-name }}
          docker build -f ${{ inputs.dockerfile-path }} -t asia-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/devops/${{ inputs.service-name }}:$GITHUB_SHA .
          docker push asia-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/devops/${{ inputs.service-name }}:$GITHUB_SHA

      - name: Deploy to GKE
        run: |
          # Create a temporary deployment.yaml with correct image
          cat <<EOF > deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${{ inputs.service-name }}
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: ${{ inputs.service-name }}
            template:
              metadata:
                labels:
                  app: ${{ inputs.service-name }}
              spec:
                containers:
                - name: ${{ inputs.service-name }}
                  image: asia-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/devops/${{ inputs.service-name }}:${{ github.sha }}
                  ports:
                  - containerPort: 8080
          EOF

          # Create a temporary service.yaml
          cat <<EOF > service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: ${{ inputs.service-name }}
          spec:
            type: LoadBalancer
            selector:
              app: ${{ inputs.service-name }}
            ports:
            - protocol: TCP
              port: 80
              targetPort: 8080
          EOF

          # Apply to GKE
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
