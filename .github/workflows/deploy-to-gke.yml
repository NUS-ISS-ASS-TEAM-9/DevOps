name: Deploy to GKE

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      container-port:
        required: false
        type: string
        default: "8080"
    secrets:
      GCP_PROJECT_ID:
        required: true
      GCP_REGION:
        required: true
      GCP_SA_KEY:
        required: true
      GCP_CLUSTER_NAME:
        required: true
      CLOUDSQL_CONNECTION_NAME:
        required: true
      DB_USERNAME:
        required: true
      DB_PASSWORD:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin'

      - name: Set up kubectl
        run: |
          gcloud container clusters get-credentials ${{ secrets.GCP_CLUSTER_NAME }} \
            --region ${{ secrets.GCP_REGION }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Checkout DevOps templates
        uses: actions/checkout@v4
        with:
          repository: NUS-ISS-ASS-TEAM-9/Devops
          path: devops-templates

      - name: Inject DB secrets/configmap
        run: |
          # Set the service name and port for dynamic substitution
          export SERVICE_NAME_LOWERCASE="${{ inputs.service-name }}" 
          export SERVICE_PORT="${{ inputs.container-port }}"  

          # Debug the port value
          echo "SERVICE_PORT=${SERVICE_PORT}"  # This helps confirm the value

          # Export the database secrets
          export DB_USERNAME="${{ secrets.DB_USERNAME }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export DB_HOST="${{ secrets.DB_HOST }}"
          export DB_PORT="${{ secrets.DB_PORT }}"
          export DB_NAME="${{ secrets.DB_NAME }}"

          # Substitute the environment variables into the templates
          envsubst < devops-templates/.github/workflows/templates/db-config.yaml > db-config.yaml
          envsubst < devops-templates/.github/workflows/templates/configmap.yaml > configmap.yaml

          # Apply the generated configmap and db-config files
          kubectl apply -f db-config.yaml
          kubectl apply -f configmap.yaml

      - name: Deploy to GKE
        run: |
          # Set service name and port again for use in the deployment.yaml
          SERVICE_NAME_LOWERCASE=$(echo "${{ inputs.service-name }}" | tr '[:upper:]' '[:lower:]')
          REGION_URL="${{ secrets.GCP_REGION }}-docker.pkg.dev"

          # Debug to check if SERVICE_PORT is correctly passed to deployment.yaml
          echo "SERVICE_PORT=${SERVICE_PORT}"

          # Ensure SERVICE_PORT is not empty
          if [ -z "$SERVICE_PORT" ]; then
            echo "Error: SERVICE_PORT is not set!"
            exit 1
          fi

          # Export the variables for envsubst substitution
          export SERVICE_NAME_LOWERCASE
          export REGION_URL
          export SERVICE_PORT
          export GITHUB_SHA=${{ github.sha }}

          # Generate the deployment.yaml using dynamic variables
          envsubst < devops-templates/.github/workflows/templates/deployment.yaml > deployment.yaml
          envsubst < devops-templates/.github/workflows/templates/hpa.yaml > hpa.yaml
          envsubst < devops-templates/.github/workflows/templates/service.yaml > service.yaml

          # Apply the generated YAML files to the Kubernetes cluster
          kubectl apply -f deployment.yaml
          kubectl apply -f hpa.yaml
          kubectl apply -f service.yaml

