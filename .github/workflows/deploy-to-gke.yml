name: Deploy to GKE

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      container-port:
        required: false
        type: string
        default: "8080"
    secrets:
      GCP_PROJECT_ID:
        required: true
      GCP_REGION:
        required: true
      GCP_SA_KEY:
        required: true
      GCP_CLUSTER_NAME:
        required: true
      CLOUDSQL_CONNECTION_NAME:
        required: true
      DB_USERNAME:
        required: true
      DB_PASSWORD:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin'

      - name: Set up kubectl
        run: |
          gcloud container clusters get-credentials ${{ secrets.GCP_CLUSTER_NAME }} \
            --region ${{ secrets.GCP_REGION }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Checkout DevOps templates
        uses: actions/checkout@v4
        with:
          repository: NUS-ISS-ASS-TEAM-9/Devops
          path: devops-templates
      
      - name: Inject DB secrets/configmap
        run: |
          # Set the service name and port for dynamic substitution
          export SERVICE_NAME_LOWERCASE="${{ inputs.service-name }}" 
          export SERVICE_PORT="${{ inputs.container-port }}"  

          # Debug the port value
          echo "SERVICE_PORT=${SERVICE_PORT}"  # This helps confirm the value

          # Export the database secrets
          export DB_USERNAME="${{ secrets.DB_USERNAME }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export DB_HOST="${{ secrets.DB_HOST }}"
          export DB_PORT="${{ secrets.DB_PORT }}"
          export DB_NAME="${{ secrets.DB_NAME }}"
          
          # Substitute the environment variables into the templates
          envsubst < devops-templates/.github/workflows/templates/db-config.yaml > db-config.yaml
          envsubst < devops-templates/.github/workflows/templates/configmap.yaml > configmap.yaml

          # Apply the generated configmap and db-config files
          kubectl apply -f db-config.yaml
          kubectl apply -f configmap.yaml

      - name: Deploy to GKE
        run: |
          # Set service name and port again for use in the deployment.yaml
          SERVICE_NAME_LOWERCASE=$(echo "${{ inputs.service-name }}" | tr '[:upper:]' '[:lower:]')
          REGION_URL="${{ secrets.GCP_REGION }}-docker.pkg.dev"

          # Debug to check if SERVICE_PORT is correctly passed to deployment.yaml
          echo "SERVICE_PORT=${SERVICE_PORT}"

          # Generate the deployment.yaml using dynamic variables
          cat <<EOF > deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${SERVICE_NAME_LOWERCASE}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: ${SERVICE_NAME_LOWERCASE}
            template:
              metadata:
                labels:
                  app: ${SERVICE_NAME_LOWERCASE}
              spec:
                containers:
                  - name: ${SERVICE_NAME_LOWERCASE}
                    image: ${REGION_URL}/${{ secrets.GCP_PROJECT_ID }}/devops/${SERVICE_NAME_LOWERCASE}:${GITHUB_SHA}
                    resources:
                      requests:
                        cpu: "100m"
                        memory: "256Mi"
                      limits:
                        cpu: "200m"
                        memory: "512Mi"
                    ports:
                      - containerPort: ${SERVICE_PORT}  # Make sure this is dynamically set
                    envFrom:
                      - configMapRef:
                          name: configmap 
                    livenessProbe:
                      httpGet:
                        path: /actuator/health
                        port: ${SERVICE_PORT}  # Make sure this is dynamically set
                      initialDelaySeconds: 120
                      periodSeconds: 15
                      timeoutSeconds: 1
                      failureThreshold: 5
                      successThreshold: 1

                    readinessProbe:
                      httpGet:
                        path: /actuator/health
                        port: ${SERVICE_PORT}  # Make sure this is dynamically set
                      initialDelaySeconds: 120
                      periodSeconds: 10
                      timeoutSeconds: 3
                      failureThreshold: 5
                      successThreshold: 1

                  - name: cloudsql-proxy
                    image: gcr.io/cloudsql-docker/gce-proxy:1.33.4
                    command: ["/cloud_sql_proxy",
                              "-instances=${{ secrets.CLOUDSQL_CONNECTION_NAME }}=tcp:${{ secrets.DB_PORT }}",
                              "-credential_file=/secrets/cloudsql/credentials.json"]
                    volumeMounts:
                      - name: cloudsql-instance-credentials
                        mountPath: /secrets/cloudsql
                        readOnly: true

                volumes:
                  - name: cloudsql-instance-credentials
                    secret:
                      secretName: cloudsql-instance-key
          EOF

          # Create Horizontal Pod Autoscaler
          cat <<EOF > hpa.yaml
          apiVersion: autoscaling/v2
          kind: HorizontalPodAutoscaler
          metadata:
            name: ${SERVICE_NAME_LOWERCASE}-hpa
          spec:
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: ${SERVICE_NAME_LOWERCASE}
            minReplicas: 1
            maxReplicas: 2
            metrics:
              - type: Resource
                resource:
                  name: cpu
                  target:
                    type: Utilization
                    averageUtilization: 80
          EOF

          # Create the service.yaml
          cat <<EOF > service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: ${SERVICE_NAME_LOWERCASE}
          spec:
            type: LoadBalancer
            selector:
              app: ${SERVICE_NAME_LOWERCASE}
            ports:
            - protocol: TCP
              port: 80
              targetPort: ${{ inputs.container-port }}
          EOF

          # Apply the generated files
          kubectl apply -f deployment.yaml
          kubectl apply -f hpa.yaml
          kubectl apply -f service.yaml


                    cat <<EOF > hpa.yaml
                    apiVersion: autoscaling/v2
                    kind: HorizontalPodAutoscaler
                    metadata:
                      name: ${SERVICE_NAME_LOWERCASE}-hpa
                    spec:
                      scaleTargetRef:
                        apiVersion: apps/v1
                        kind: Deployment
                        name: ${SERVICE_NAME_LOWERCASE}
                      minReplicas: 1
                      maxReplicas: 2
                      metrics:
                        - type: Resource
                          resource:
                            name: cpu
                            target:
                              type: Utilization
                              averageUtilization: 80
          EOF

          cat <<EOF > service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: ${SERVICE_NAME_LOWERCASE}
          spec:
            type: LoadBalancer
            selector:
              app: ${SERVICE_NAME_LOWERCASE}
            ports:
            - protocol: TCP
              port: 80
              targetPort: ${{ inputs.container-port }}
          EOF

          kubectl apply -f deployment.yaml
          kubectl apply -f hpa.yaml
          kubectl apply -f service.yaml
